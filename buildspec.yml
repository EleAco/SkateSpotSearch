version: 0.2

phases:
  install:
    runtime-versions:
      nodejs: 12
      ruby: 2.6
      docker: 18
  pre_build:
    commands:
      - node -v
      - echo Logging in to Amazon ECR...
      - pip install --upgrade pip
      - pip install awscli --upgrade
      - aws --version
      - echo Login Amazon ECR...
      - echo $AWS_DEFAULT_REGION
      - $(aws ecr get-login --no-include-email --region $AWS_DEFAULT_REGION)
      # Dockerイメージのタグとして使用するため、Gitのコミットハッシュを取得
      - IMAGE_TAG=$CODEBUILD_BUILD_NUMBER
      - REPOSITORY_URI_RAILS=$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/sss_app
      - REPOSITORY_URI_NGINX=$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/sss_nginx
  build:
    commands:
      - echo image build...
      - docker-compose -f docker-compose-pro.yml up --build -d
      - docker-compose -f docker-compose-pro.yml run app ls /app/public/packs/
      - docker images
      # 前半でビルドしたイメージを指定。後半でECRリポジトリ名をタグとして指定
      - docker tag src_app:latest $REPOSITORY_URI_RAILS:$IMAGE_TAG
      - docker tag src_nginx:latest $REPOSITORY_URI_NGINX:$IMAGE_TAG
  post_build:
    commands:
      - echo check images
      - docker images
      - echo Pushing the Docker images ECR...
      ## ビルドしたsrc_appとsrc_nginxがECRリポジトリのsss_appとsss_nginxにプッシュされる。
      - docker push $REPOSITORY_URI_RAILS:$IMAGE_TAG
      - docker push $REPOSITORY_URI_NGINX:$IMAGE_TAG
      - echo Writing imagedefinitions.json...
      - printf '[{"name":"app","imageUri":"%s"},{"name":"nginx","imageUri":"%s"}]' $REPOSITORY_URI_RAILS:$IMAGE_TAG $REPOSITORY_URI_NGINX:$IMAGE_TAG > imagedefinitions.json # <container-definition> もお使いのコンテナ名に書き換え
artifacts:
  ## buildの最後で作成したファイルをアーティファクトとして流す
  files:
    - imagedefinitions.json